# Título do Trabalho: Modelo para previsão de dados de Irradiação solar parageração de energia com base em séries temporais
# Autor: Carlos Pereira de Jesus
# Orientador: Mateus Modesto
# Curso: Data Science e Analytics – 2022
# Setando valores máximos de plotagem
options(max.print = 999999)
pacotes <- c("dplyr", "datasets","prophet", "forecast","fpp2","tseries","patchwork", "DataCombine", "TTR")

if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
  instalador <- pacotes[!pacotes %in% installed.packages()]
  for(i in 1:length(instalador)) {
    install.packages(instalador, dependencies = T)
    break()}
  sapply(pacotes, require, character = T) 
} else {
  sapply(pacotes, require, character = T) 
}
################################             Box e Jenkis (1976)                  #################################################
################################   Passo 1: Tratamento e apresentação de dados    #################################################

# 1.1: Carregando base de dados coletada do Site da NASA com os valores da Irradiação entre os anos de 1984 e 2021
Base_Dados = read.csv(file = "Base_Irrad_1984_2022.csv")


# 1.2: Gerando uma série temporal da base de dados original contendo o valores da variável Irradiação entre os anos de 1984 e 2021


Stemp_Base_Dados <- ts(Base_Dados, start = c(1984,1),  end = c(2021,12),frequency =  12)
Stemp_Base_Dados
# 1.3 Plotando o gprafico da Série Temporal criada anteriormente


plot.ts(Stemp_Base_Dados, lwd=0.5, col = "black",
         main = "Série Temportal - Caucáia-CE - 1984 a 2021",
         xlab = "Anos", ylab = "Irradiação  (kW-hr/m^2/day)")
        axis(2, at=seq(from= 1984, to=2021, by=1))
        
Log_Base_Dados <- log(Stemp_Base_Dados)
plot.ts(Log_Base_Dados)
dec <- decompose(Stemp_Base_Dados)  
autoplot(dec) 
                ################################   Passo 2: Diferenciação da Séries    #################################################
# 2.1 Aplicação de LAG

#Stemp_Base_Dados
#lag(Base_Dados, -1)
#lag(Base_Dados, -2)

# 2.2 Gerando lags para  série. Criando uma nova base

tsData <- ts(Stemp_Base_Dados)

tsData

LaggedTs <- lag(tsData,3) #Verificar
myDf <- as.data.frame(tsData) #Verificar
myDf
myDf <- slide(myDf, "x",NewVar = "xLag1", slideBy = -1 )
myDf <- slide(myDf, "x",NewVar = "xLead1", slideBy = 1 ) # Verificar
head(myDf)
hist(Stemp_Base_Dados) # verificar se vale pôr no trabalho


# 2.3 Autocorrelação e Autocorrelação Parcial
Stemp_Base_Dados_acf = acf(Stemp_Base_Dados, lag.max = 20 )

Stemp_Base_Dados_pacf=pacf(Stemp_Base_Dados, 12)

# 2.4 Autocorrelação e Autocorrelação Parcial
nsdiffs(Stemp_Base_Dados)  # número para diferenciação sazonal necessário. Retornou o valor 1
Stemp_Base_Dados_diff <- diff(Stemp_Base_Dados, lag=frequency(Stemp_Base_Dados), differences=1)  # diferenciação sazonal
plot(Stemp_Base_Dados_diff, main = "Diferença Sazonal")
Stemp_Base_Dados_diff 
hist(Stemp_Base_Dados_diff) # verificar se vale pôr no trabalho

# Passo 2 .2 Para avaliar vamos gerar um histograma

plotForecastErrors <- function(forecastErrors)
{
  forecastErrorsSd <- sd(x = forecastErrors,
                         na.rm = TRUE)
  forecastErrorsMin <- min(forecastErrors,
                           na.rm = TRUE) - forecastErrorsSd * 5
  forecastErrorsMax <- max(forecastErrors,
                           na.rm = TRUE) + forecastErrorsSd * 3
  forecastErrorsNorm <- rnorm(n = 10000,
                              mean = 0,
                              sd = forecastErrorsSd)
  binMin <- min(forecastErrorsMin, forecastErrorsNorm)
  binMax <- max(forecastErrorsMax, forecastErrorsNorm)
  binBreaks <- IQR(x = forecastErrors,
                   na.rm = TRUE) / 4
  bins <- seq(from = binMin,
              to = binMax,
              by = binBreaks)
  hist(x = forecastErrors,
       col = "#DCE319FF",
       freq = FALSE,
       breaks = bins)
  with(data = hist(x = forecastErrorsNorm,
                   plot = FALSE,
                   breaks = bins),
       expr = lines(x = mids,
                    y = density,
                    col = "#440154FF",
                    lwd = 3))
}



################################   Passo 3: Usar séries diferenciadas para definir p e q    #################################################
pacf(Stemp_Base_Dados_diff)
acf(Stemp_Base_Dados_diff)
nsdiffs(Stemp_Base_Dados) 
#ndiffs(Stemp_Base_Dados)

################################   Passo 4: Implementando o Arima nos dados originais - RETIRAR    #################################################
mod.arima <- Arima(Stemp_Base_Dados, order = c(1, 1,1), seasonal = c(1, 1, 1))
summary(mod.arima)
autoplot(Stemp_Base_Dados) + autolayer(mod.arima$fitted)

################################   Passo 5: Verificando o Modelo RETIRAR    #################################################
prev.arima <- forecast(mod.arima, h = 12)
autoplot(prev.arima)
checkresiduals(mod.arima)
### Aplicando Auto ARIMA
auto.arima(Stemp_Base_Dados, trace = TRUE, approximation = FALSE)
mod.aa <- Arima(Stemp_Base_Dados, order = c(2, 0, 0), seasonal = c(2, 1, 0), include.drift = FALSE)
checkresiduals(mod.aa)
# plotando o histograma dos erros de previsão
plotForecastErrors(mod.arima$residuals)
################################   Passo 6: Previsões do Modelo    #################################################
prev.aa <- forecast(mod.aa, h = 12)
autoplot(prev.aa)
teste <-(prev.aa)
teste
autoplot(Stemp_Base_Dados) + autolayer(prev.aa$fitted)

