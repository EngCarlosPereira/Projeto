tsData
LaggedTs <- stats::lag(tsData,3) #Verificar
LaggedTs
myDf <- as.data.frame(tsData)
myDf
myDf <- slide(myDf, myDf$x,NewVar =myDf$xLag1 , slideBy = -3 )
myDf <- slide(myDf, myDf$x,NewVar =myDf$xLag1, slideBy = 3 )
tsData <- ts(Stemp_Base_Dados)
tsData
LaggedTs <- stats::lag(tsData,1) #Verificar
LaggedTs
tsData <- ts(Stemp_Base_Dados)
tsData
LaggedTs <- lag(tsData,1) #Verificar
tsData <- ts(Base_Dados)
tsData
LaggedTs <- lag(tsData,1) #Verificar
tsData <- ts(Base_Dados)
tsData
LaggedTs <- stats::lag(tsData,1) #Verificar
LaggedTs
myDf <- as.data.frame(tsData)
myDf
myDf <- slide(myDf, myDf$x,NewVar =myDf$xLag1 , slideBy = -3 )
myDf <- as.data.frame(tsData)
myDf
myDf <- slide(myDf, myDf$X5.63,NewVar =myDf$xLag1 , slideBy = -3 )
# Título do Trabalho: Modelo para previsão de dados de Irradiação solar parageração de energia com base em séries temporais
# Autor: Carlos Pereira de Jesus
# Orientador: Mateus Modesto
# Curso: Data Science e Analytics – 2022
# Setando valores máximos de plotagem
options(max.print = 999999)
pacotes <- c("dplyr", "datasets","prophet", "forecast","fpp2","tseries","patchwork", "DataCombine", "TTR")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
# 1.1: Carregando base de dados coletada do Site da NASA com os valores da Irradiação entre os anos de 1984 e 2021
Base_Dados = read.csv(file = "Base_Irrad_1984_2022.csv")
View(Base_Dados)
Base_Dados
Stemp_Base_Dados <- ts(Base_Dados, start = c(1984,1),  end = c(2021,12),frequency =  12)
Stemp_Base_Dados # Imprimindo a base de dados em série temporal
plot.ts(Stemp_Base_Dados, lwd=0.5, col = "black",
main = "Série Temportal - Caucáia-CE - 1984 a 2021",
xlab = "Anos", ylab = "Irradiação  (kW-hr/m^2/day)")
axis(2, at=seq(from= 1984, to=2021, by=1))
Log_Base_Dados <- log(Stemp_Base_Dados)
plot.ts(Log_Base_Dados)
dec <- decompose(Stemp_Base_Dados)
autoplot(dec)
tsData <- ts(Base_Dados)
tsData
tsData <- ts(Stemp_Base_Dados)
tsData
tsData <-  ts(Base_Dados, start = c(1984,1),  end = c(2021,12),frequency =  12)
tsData
LaggedTs <- lag(tsData,1) #Verificar
LaggedTs <- lag(tsData,1) #Verificar
tsData
tsDataVectot <- as.data.frame(tsData)
tsDataVectot
LaggedTs <- lag(tsDataVectot,1) #Verificar
LaggedTs
LaggedTs <- lag(tsDataVector,3) #Verificar
LaggedTs
tsData <-  ts(Base_Dados, start = c(1984,1),  end = c(2021,12),frequency =  12)
tsData
tsDataVector <- as.data.frame(tsData)
tsDataVector
LaggedTs <- lag(tsDataVector,3) #Verificar
LaggedTs
tsData <-  ts(Base_Dados, start = c(1984,1),  end = c(2021,12),frequency =  12)
tsData
tsDataVector <- as.data.frame(tsData)
tsDataVector
LaggedTs <- lag(tsDataVector,1) #Verificar
LaggedTs
myDf <- as.data.frame(tsData)
myDf
myDf <- slide(myDf, myDf$X5.63,NewVar =myDf$xLag1 , slideBy = -1 )
tsData <-  ts(Base_Dados, start = c(1984,1),  end = c(2021,12),frequency =  12)
tsData
tsDataVector <- as.data.frame(tsData)
tsDataVector
LaggedTs <- lag(tsDataVector,1) #Verificar
LaggedTs
myDf <- as.data.frame(tsData)
myDf
myDf <- slide(myDf, myDf$X5.63,NewVar =myDf$xLag1 , slideBy = -1 )
myDf
tsDataVector <- as.data.frame(tsData)
tsDataVector
tsData
tsDataVector <- as.data.frame(tsData)
tsDataVector
LaggedTs <- lag(tsDataVector,1) #Verificar
LaggedTs
myDf <- as.data.frame(tsData)
myDf
myDf <- slide(myDf, myDf$X,NewVar =myDf$xLag1 , slideBy = -1 )
tsData <-  ts(Base_Dados, start = c(1984,1),  end = c(2021,12),frequency =  12)
tsData
tsDataVector <- as.data.frame(tsData)
tsDataVector
LaggedTs <- lag(tsDataVector,1) #Verificar
LaggedTs
myDf <- as.data.frame(tsData)
myDf
myDf1 <- slide(myDf, myDf$X,NewVar =myDf$xLag1 , slideBy = -1 )
LaggedTs$x
LaggedTs
LaggedTs
LaggedTs
LaggedTs
LaggedTs
LaggedTs
tsData
tsDataVector <- as.data.frame(tsData)
tsDataVector
LaggedTs <- lag(tsDataVector,1) #Verificar
LaggedTs
LaggedTs$x
tsData
tsDataVector <- as.data.frame(tsData)
tsDataVector
LaggedTs <- lag(tsDataVector,1) #Verificar
LaggedTs$x
Lag <- slide(tsDataVector,LaggedTs$x,NewVar =LaggedTs$xLag1 , slideBy = -1)
LaggedTs <- lag(tsDataVector,1) #Verificar
LaggedTs$x
Lag <- slide(LaggedTs,LaggedTs$x,NewVar =LaggedTs$xLag1 , slideBy = -1)
tsData
tsDataVector <- as.data.frame(tsData)
tsDataVector
LaggedTs <- lag(tsDataVector,1) #Verificar
LaggedTs$x
Lag <- slide(tsData,LaggedTs$x,NewVar =LaggedTs$xLag1 , slideBy = -1)
tsData
tsDataVector <- as.data.frame(tsData)
tsDataVector
LaggedTs <- lag(tsDataVector,1) #Verificar
LaggedTs$x
Lag <- slide(tsDataVector,LaggedTs$x,NewVar =LaggedTs$xLag1 , slideBy = -1)
teste <- as.data.frame(Base_Dados)
teste
teste <- as.data.frame(Base_Dados)
teste$
Teste_lag <- slide(teste,teste$x,NewVar =teste$xLag1 , slideBy = -1)
tsData <-  ts(Base_Dados, start = c(1984,1),  end = c(2021,12),frequency =  12)
tsData
tsDataVector <- as.data.frame(tsData)
tsDataVector
LaggedTs <- lag(tsDataVector,1) #Verificar
LaggedTs$x
Lag <- slide(tsDataVector,LaggedTs$x,NewVar =LaggedTs$xLag1 , slideBy = -1)
teste <- as.data.frame(Base_Dados)
teste$
teste <- slide(teste,teste$x,NewVar =teste$xLag1 , slideBy = -1)
teste <- as.data.frame(tsData)
teste$
teste <- slide(teste,teste$x,NewVar =teste$xLag1 , slideBy = -1)
tsData
tsDataVector <- as.data.frame(tsData)
tsDataVector
LaggedTs <- lag(tsDataVector,1) #Verificar
LaggedTs$x
Lag <- slide(tsDataVector,LaggedTs$x,NewVar =LaggedTs$xLag1 , slideBy = -1)
teste <- as.data.frame.array(tsData)
teste$
teste <- slide(teste,teste$x,NewVar =teste$xLag1 , slideBy = -1)
teste <- as.data.frame(tsData)
teste$
teste <- slide(teste,teste$x,NewVar =teste$xLag1 , slideBy = -1)
teste <- as.data.frame(tsData)
teste$
teste <- slide(teste,teste$x,NewVar =teste$xLag1 , slideBy = -1)
teste <- as.data.frame(tsData)
teste$x
teste <- slide(teste,teste$x,NewVar =teste$xLag1 , slideBy = -1)
teste <- as.data.frame(tsData)
teste
teste$x
teste <- as.data.frame(tsData)
teste
teste$x
teste <- slide(teste,'x',NewVar ='xLag1' , slideBy = -1)
teste <- as.data.frame(tsData)
teste
teste$x
teste <- slide(teste,Var = 'x',NewVar ='xLag1' , slideBy = -1)
teste <- as.data.frame(tsData)
teste
teste$x
testeSlide <- slide(teste,Var = 'x',NewVar ='xLag1' , slideBy = -1)
teste <- as.data.frame(tsData,x)
teste <- as.data.frame(tsData,teste$x)
teste <- as.data.frame(tsData,x)
teste <- as.data.frame(tsData)
teste
teste$x
testeSlide <- slide(teste,Var = 'x',NewVar ='xLag1' , slideBy = -1)
teste <- as.data.frame(tsData)
teste
teste$x
testeSlide <- slide(teste,Var = 'x',NewVar ='xLag1' , slideBy = -1)
teste <- as.data.frame(tsData)
teste
teste$x
testeSlide <- slide(teste,Var = teste$x,NewVar ='xLag1' , slideBy = -1)
teste <- as.data.frame(tsData)
teste
teste$x
testeSlide <- slide(teste, Var = 'teste$x', NewVar ='xLag1' , slideBy = -1)
teste <- as.data.frame(tsData)
teste
teste$x
testeSlide <- slide(teste, Var = 'x', NewVar ='xLag1' , slideBy = -1)
testeS <- slide(teste, Var = 'x', NewVar ='xLag1' , slideBy = -1)
teste <- as.data.frame(tsData)
teste
teste$x
teste <- slide(teste, Var = 'x', NewVar ='xLag1' , slideBy = -1)
teste <- as.data.frame(tsData)
teste
teste$x
teste <- slide(teste$x, Var = 'x', NewVar ='xLag1' , slideBy = -1)
teste <- as.data.frame(tsData)
teste
teste$x
teste <- slide(teste, Var = 'x', NewVar ='xLag1' , slideBy = -1)
teste <- as.data.frame(tsData)
teste
teste$x
teste <- slide(teste, Var = teste$x, NewVar =teste$xLag1 , slideBy = -1)
teste <- as.data.frame(tsData)
teste
teste$x
teste <- slide(teste, Var = 'x', NewVar ='Lag1' , slideBy = -1)
teste
teste <- as.data.frame(tsData)
teste
teste$x
teste$Lag1
teste <- slide(teste, Var = teste$x, NewVar =teste$Lag1 , slideBy = -1)
teste$Lag1
teste <- as.data.frame(tsData)
teste
teste$x
teste$Lag1
teste <- slide(teste, Var = teste$x, NewVar =teste$Lag1 , slideBy = 1)
teste$Lag1
teste <- as.data.frame(tsData)
teste
teste$x
teste$Lag1
teste3 <- slide(teste, Var = teste$x, NewVar =teste$Lag1 , slideBy = 1)
# Create dummy data
A <- B <- C <- sample(1:20, size = 20, replace = TRUE)
ID <- sort(rep(seq(1:4), 5))
Data <- data.frame(ID, A, B, C)
A
Data
# Lag the variable one time unit by ID group, with invalid lags
Data <- Data[1:16, ]
Data
DataSlid3 <- slide(data = Data, Var = 'B', GroupVar = 'ID',
NewVar = 'BLag', slideBy = -2, keepInvalid = TRUE)
# Create dummy data
A <- B <- C <- sample(1:20, size = 20, replace = TRUE)
ID <- sort(rep(seq(1:4), 5))
Data <- data.frame(ID, A, B, C)
A
Data
# Lag the variable one time unit by ID group, with invalid lags
Data <- Data[1:16, ]
Data
DataSlid3 <- slide(data = Data, Var = 'B', GroupVar = 'ID', NewVar = 'BLag', slideBy = -2, keepInvalid = TRUE)
# Create dummy data
A <- B <- C <- sample(1:20, size = 20, replace = TRUE)
ID <- sort(rep(seq(1:4), 5))
Data <- data.frame(ID, A, B, C)
A
Data
# Lag the variable one time unit by ID group, with invalid lags
Data <- Data[1:16, ]
Data
DataSlid3 <- slide(data = Data, Var = 'B', GroupVar = 'ID', NewVar = 'BLag', slideBy = -2, keepInvalid = TRUE)
Data
DataSlid3 <- slide(data = Data, Var = 'B', GroupVar = 'ID', NewVar = 'BLag', slideBy = -2, keepInvalid = TRUE)
# Lead the variable by two time units
DataSlid1 <- slide(Data, Var = 'A', NewVar = 'ALead', slideBy = 2)
myDf <- as.data.frame(tsData)
myDf
myDf <- slide(myDf, myDf$X,NewVar =myDf$xLag1 , slideBy = -1 )
# 2.2 Autocorrelação e Autocorrelação Parcial
Stemp_Base_Dados_acf = acf(Stemp_Base_Dados, lag.max = 20 )
Stemp_Base_Dados_pacf=pacf(Stemp_Base_Dados, 12)
myDf <- as.data.frame(tsData)
myDf
myDf <- slide(myDf, myDf$X,NewVar =myDf$xLag1 , slideBy = -1 )
teste <- as.data.frame(tsData)
teste
teste$x
teste$Lag1
teste3 <- slide(teste, Var = teste$x, NewVar =teste$Lag1 , slideBy = 1)
teste <- as.data.frame(tsData)
teste
tsData <-  ts(Base_Dados, start = c(1984,1),  end = c(2021,12),frequency =  12)
tsData
tsData <-  ts(Base_Dados, start = c(1984,1),  end = c(2021,12),frequency =  12)
tsData
tsDataVector <- as.data.frame(tsData)
tsDataVector
LaggedTs <- lag(tsDataVector,1) #Verificar
LaggedTs$x
Lag <- slide(tsDataVector,LaggedTs$x,NewVar =LaggedTs$xLag1 , slideBy = -1)
teste <- as.data.frame(tsData)
teste
teste$x
teste$Lag1
teste3 <- slide(tsData, Var = teste$x, NewVar =teste$Lag1 , slideBy = 1)
tsData
teste <- as.data.frame(tsData$x)
teste <- as.data.frame(tsData)
teste
teste$x
teste$Lag1
teste3 <- slide(tsData, Var = teste$x, NewVar =teste$Lag1 , slideBy = 1)
teste3<- slide(tsData, Var = teste$x, NewVar =teste$Lag1 , slideBy = 1)
teste <- as.data.frame(tsData)
teste
teste$x
teste$Lag1
teste3<- slide(tsData, Var = teste$x, NewVar =teste$Lag1 , slideBy = -1)
teste$Lag1
teste <- as.data.frame(tsData)
teste
teste$x
Stemp_Base_Dados
teste <- as.data.frame(tsData)
teste
teste$x
teste3<- slide(Stemp_Base_Dados, Var = teste$x, NewVar =teste$Lag1 , slideBy = -1)
teste$x
teste <- as.data.frame(tsData)
teste
teste$x
teste3<- slide(teste$x, Var = teste$x, NewVar =teste$Lag1 , slideBy = -1)
teste
teste$x
teste <- as.data.frame(tsData)
teste
teste$x
teste3<- slide(teste$x, Var = teste, NewVar =teste$Lag1 , slideBy = -1)
teste <- as.data.frame(tsData)
teste
teste$x
teste3<- slide(teste$x, Var = teste$x, NewVar =teste$Lag1 , slideBy = -1)
teste <- as.data.frame(tsData)
teste
teste$x
teste3<- slide(Base_Dados, Var = teste$x, NewVar =teste$Lag1 , slideBy = -1)
teste <- as.data.frame(tsData)
teste
teste$x
teste3<- slide(x, Var = teste$x, NewVar =teste$Lag1 , slideBy = -1)
teste <- as.data.frame(tsData)
teste
teste$x
teste3<- slide(tsData, Var = teste$x, NewVar =teste$Lag1 , slideBy = -1)
teste <- as.data.frame(tsData)
teste
teste$x
teste3<- slide(as.data.frame(tsData), Var = teste$x, NewVar =teste$Lag1 , slideBy = -1)
teste <- as.data.frame(tsData)
teste
teste$x
teste3<- slide(teste, Var = teste$x, NewVar =teste$Lag1 , slideBy = 1)
teste <- as.data.frame(tsData)
teste
teste$x
teste3<- slide(teste, Var = teste$x, NewVar =teste, slideBy = -1)
teste$Lag1
teste <- as.data.frame(tsData)
teste
tsData
tsData
lag(tsData)
lag(tsData,-1)
Base_Dados_Virg = read.csv(file = "Base_Irrad_1984_2022_1.csv")
Base_Dados_Virg
Base_Dados_Virg = read.csv(file = "Base_Irrad_1984_2022_1.csv")
Base_Dados_Virg
tsData <-  ts(Base_Dados_Virg, start = c(1984,1),  end = c(2021,12),frequency =  12)
tsData
tsData
lag(tsData,-1)
tsData <-  ts(Base_Dados, start = c(1984,1),  end = c(2021,12),frequency =  12)
tsData
lag(tsData,-2)
tsData
tsDataVector <- as.data.frame(tsData)
tsDataVector
LaggedTs <- lag(tsDataVector,1) #Verificar
LaggedTs$x
Lag <- slide(tsDataVector,LaggedTs$x,NewVar =LaggedTs$xLag1 , slideBy = -1)
Stemp_Base_Dados
tsData
lag(tsDataVector,-1)
lag(tsDataVector$x,-1)
tsData <-  ts(Base_Dados, start = c(1984,1),  end = c(2021,12),frequency =  12)
tsData
tsDataVector <- as.data.frame(tsData)
tsDataVector
LaggedTs <- lag(tsDataVector,1) #Verificar
LaggedTs$x
Lag <- slide(tsDataVector,LaggedTs$x,NewVar =LaggedTs$xLag1 , slideBy = -1)
Stemp_Base_Dados
tsData
lag(tsDataVector$x,-1)
# Título do Trabalho: Modelo para previsão de dados de Irradiação solar parageração de energia com base em séries temporais
# Autor: Carlos Pereira de Jesus
# Orientador: Mateus Modesto
# Curso: Data Science e Analytics – 2022
# Setando valores máximos de plotagem
options(max.print = 999999)
pacotes <- c("dplyr", "datasets","prophet", "forecast","fpp2","tseries","patchwork", "DataCombine", "TTR")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
# 1.1: Carregando base de dados coletada do Site da NASA com os valores da Irradiação entre os anos de 1984 e 2021
Base_Dados = read.csv(file = "Base_Irrad_1984_2022.csv")
Base_Dados
Stemp_Base_Dados <- ts(Base_Dados, start = c(1984,1),  end = c(2021,12),frequency =  12)
Stemp_Base_Dados # Imprimindo a base de dados em série temporal
plot.ts(Stemp_Base_Dados, lwd=0.5, col = "black",
main = "Série Temportal - Caucáia-CE - 1984 a 2021",
xlab = "Anos", ylab = "Irradiação  (kW-hr/m^2/day)")
axis(2, at=seq(from= 1984, to=2021, by=1))
Log_Base_Dados <- log(Stemp_Base_Dados)
plot.ts(Log_Base_Dados)
dec <- decompose(Stemp_Base_Dados)
autoplot(dec)
# 2.1 Autocorrelação e Autocorrelação Parcial
Stemp_Base_Dados_acf = acf(Stemp_Base_Dados, lag.max = 20 )
Stemp_Base_Dados_pacf=pacf(Stemp_Base_Dados, 12)
# 2.2 Autocorrelação e Autocorrelação Parcial
nsdiffs(Stemp_Base_Dados)  # número para diferenciação sazonal necessário. Retornou o valor 1
Stemp_Base_Dados_diff <- diff(Stemp_Base_Dados, lag=frequency(Stemp_Base_Dados), differences=1)  # diferenciação sazonal
plot(Stemp_Base_Dados_diff, main = "Diferença Sazonal")
Stemp_Base_Dados_diff
hist(Stemp_Base_Dados_diff) # verificar se vale pôr no trabalho
plotForecastErrors <- function(forecastErrors)
{
forecastErrorsSd <- sd(x = forecastErrors,
na.rm = TRUE)
forecastErrorsMin <- min(forecastErrors,
na.rm = TRUE) - forecastErrorsSd * 5
forecastErrorsMax <- max(forecastErrors,
na.rm = TRUE) + forecastErrorsSd * 3
forecastErrorsNorm <- rnorm(n = 10000,
mean = 0,
sd = forecastErrorsSd)
binMin <- min(forecastErrorsMin, forecastErrorsNorm)
binMax <- max(forecastErrorsMax, forecastErrorsNorm)
binBreaks <- IQR(x = forecastErrors,
na.rm = TRUE) / 4
bins <- seq(from = binMin,
to = binMax,
by = binBreaks)
hist(x = forecastErrors,
col = "#DCE319FF",
freq = FALSE,
breaks = bins)
with(data = hist(x = forecastErrorsNorm,
plot = FALSE,
breaks = bins),
expr = lines(x = mids,
y = density,
col = "#440154FF",
lwd = 3))
}
################################   Passo 3: Usar séries diferenciadas para definir p e q    #################################################
pacf(Stemp_Base_Dados_diff)
acf(Stemp_Base_Dados_diff)
nsdiffs(Stemp_Base_Dados)
auto.arima(Stemp_Base_Dados, trace = TRUE, approximation = FALSE)
mod.aa <- Arima(Stemp_Base_Dados, order = c(2, 0, 0), seasonal = c(2, 1, 0), include.drift = FALSE)
checkresiduals(mod.aa)
# plotando o histograma dos erros de previsão
plotForecastErrors(mod.arima$residuals)
# plotando o histograma dos erros de previsão
plotForecastErrors(mod.aa$residuals)
################################   Passo 4: Previsões do Modelo    #################################################
prev.aa <- forecast(mod.aa, h = 12)
autoplot(prev.aa)
Base_Prev <-(prev.aa)
Base_Prev
autoplot(Stemp_Base_Dados) + autolayer(prev.aa$fitted)
